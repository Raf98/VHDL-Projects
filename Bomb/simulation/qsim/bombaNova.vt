// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/01/2018 19:00:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    bombaNova
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bombaNova_vlg_sample_tst(
	clock,
	codEntrada,
	fios,
	selCont,
	selOp,
	setCont,
	setDesarme,
	setInDesarme,
	sampler_tx
);
input  clock;
input [3:0] codEntrada;
input [4:0] fios;
input [1:0] selCont;
input [1:0] selOp;
input  setCont;
input  setDesarme;
input  setInDesarme;
output sampler_tx;

reg sample;
time current_time;
always @(clock or codEntrada or fios or selCont or selOp or setCont or setDesarme or setInDesarme)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module bombaNova_vlg_check_tst (
	desarmar,
	displayAux,
	displayCod,
	displayMin1,
	displayMin2,
	displaySeg1,
	displaySeg2,
	explodiu,
	sampler_rx
);
input  desarmar;
input [6:0] displayAux;
input [6:0] displayCod;
input [6:0] displayMin1;
input [6:0] displayMin2;
input [6:0] displaySeg1;
input [6:0] displaySeg2;
input  explodiu;
input sampler_rx;

reg  desarmar_expected;
reg [6:0] displayAux_expected;
reg [6:0] displayCod_expected;
reg [6:0] displayMin1_expected;
reg [6:0] displayMin2_expected;
reg [6:0] displaySeg1_expected;
reg [6:0] displaySeg2_expected;
reg  explodiu_expected;

reg  desarmar_prev;
reg [6:0] displayAux_prev;
reg [6:0] displayCod_prev;
reg [6:0] displayMin1_prev;
reg [6:0] displayMin2_prev;
reg [6:0] displaySeg1_prev;
reg [6:0] displaySeg2_prev;
reg  explodiu_prev;

reg  desarmar_expected_prev;
reg [6:0] displayAux_expected_prev;
reg [6:0] displayCod_expected_prev;
reg [6:0] displayMin1_expected_prev;
reg [6:0] displayMin2_expected_prev;
reg [6:0] displaySeg1_expected_prev;
reg [6:0] displaySeg2_expected_prev;
reg  explodiu_expected_prev;

reg  last_desarmar_exp;
reg [6:0] last_displayAux_exp;
reg [6:0] last_displayCod_exp;
reg [6:0] last_displayMin1_exp;
reg [6:0] last_displayMin2_exp;
reg [6:0] last_displaySeg1_exp;
reg [6:0] last_displaySeg2_exp;
reg  last_explodiu_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	desarmar_prev = desarmar;
	displayAux_prev = displayAux;
	displayCod_prev = displayCod;
	displayMin1_prev = displayMin1;
	displayMin2_prev = displayMin2;
	displaySeg1_prev = displaySeg1;
	displaySeg2_prev = displaySeg2;
	explodiu_prev = explodiu;
end

// update expected /o prevs

always @(trigger)
begin
	desarmar_expected_prev = desarmar_expected;
	displayAux_expected_prev = displayAux_expected;
	displayCod_expected_prev = displayCod_expected;
	displayMin1_expected_prev = displayMin1_expected;
	displayMin2_expected_prev = displayMin2_expected;
	displaySeg1_expected_prev = displaySeg1_expected;
	displaySeg2_expected_prev = displaySeg2_expected;
	explodiu_expected_prev = explodiu_expected;
end



// expected desarmar
initial
begin
	desarmar_expected = 1'bX;
end 
// expected displayAux[ 6 ]
initial
begin
	displayAux_expected[6] = 1'bX;
end 
// expected displayAux[ 5 ]
initial
begin
	displayAux_expected[5] = 1'bX;
end 
// expected displayAux[ 4 ]
initial
begin
	displayAux_expected[4] = 1'bX;
end 
// expected displayAux[ 3 ]
initial
begin
	displayAux_expected[3] = 1'bX;
end 
// expected displayAux[ 2 ]
initial
begin
	displayAux_expected[2] = 1'bX;
end 
// expected displayAux[ 1 ]
initial
begin
	displayAux_expected[1] = 1'bX;
end 
// expected displayAux[ 0 ]
initial
begin
	displayAux_expected[0] = 1'bX;
end 
// expected displayCod[ 6 ]
initial
begin
	displayCod_expected[6] = 1'bX;
end 
// expected displayCod[ 5 ]
initial
begin
	displayCod_expected[5] = 1'bX;
end 
// expected displayCod[ 4 ]
initial
begin
	displayCod_expected[4] = 1'bX;
end 
// expected displayCod[ 3 ]
initial
begin
	displayCod_expected[3] = 1'bX;
end 
// expected displayCod[ 2 ]
initial
begin
	displayCod_expected[2] = 1'bX;
end 
// expected displayCod[ 1 ]
initial
begin
	displayCod_expected[1] = 1'bX;
end 
// expected displayCod[ 0 ]
initial
begin
	displayCod_expected[0] = 1'bX;
end 
// expected displayMin1[ 6 ]
initial
begin
	displayMin1_expected[6] = 1'bX;
end 
// expected displayMin1[ 5 ]
initial
begin
	displayMin1_expected[5] = 1'bX;
end 
// expected displayMin1[ 4 ]
initial
begin
	displayMin1_expected[4] = 1'bX;
end 
// expected displayMin1[ 3 ]
initial
begin
	displayMin1_expected[3] = 1'bX;
end 
// expected displayMin1[ 2 ]
initial
begin
	displayMin1_expected[2] = 1'bX;
end 
// expected displayMin1[ 1 ]
initial
begin
	displayMin1_expected[1] = 1'bX;
end 
// expected displayMin1[ 0 ]
initial
begin
	displayMin1_expected[0] = 1'bX;
end 
// expected displayMin2[ 6 ]
initial
begin
	displayMin2_expected[6] = 1'bX;
end 
// expected displayMin2[ 5 ]
initial
begin
	displayMin2_expected[5] = 1'bX;
end 
// expected displayMin2[ 4 ]
initial
begin
	displayMin2_expected[4] = 1'bX;
end 
// expected displayMin2[ 3 ]
initial
begin
	displayMin2_expected[3] = 1'bX;
end 
// expected displayMin2[ 2 ]
initial
begin
	displayMin2_expected[2] = 1'bX;
end 
// expected displayMin2[ 1 ]
initial
begin
	displayMin2_expected[1] = 1'bX;
end 
// expected displayMin2[ 0 ]
initial
begin
	displayMin2_expected[0] = 1'bX;
end 
// expected displaySeg1[ 6 ]
initial
begin
	displaySeg1_expected[6] = 1'bX;
end 
// expected displaySeg1[ 5 ]
initial
begin
	displaySeg1_expected[5] = 1'bX;
end 
// expected displaySeg1[ 4 ]
initial
begin
	displaySeg1_expected[4] = 1'bX;
end 
// expected displaySeg1[ 3 ]
initial
begin
	displaySeg1_expected[3] = 1'bX;
end 
// expected displaySeg1[ 2 ]
initial
begin
	displaySeg1_expected[2] = 1'bX;
end 
// expected displaySeg1[ 1 ]
initial
begin
	displaySeg1_expected[1] = 1'bX;
end 
// expected displaySeg1[ 0 ]
initial
begin
	displaySeg1_expected[0] = 1'bX;
end 
// expected displaySeg2[ 6 ]
initial
begin
	displaySeg2_expected[6] = 1'bX;
end 
// expected displaySeg2[ 5 ]
initial
begin
	displaySeg2_expected[5] = 1'bX;
end 
// expected displaySeg2[ 4 ]
initial
begin
	displaySeg2_expected[4] = 1'bX;
end 
// expected displaySeg2[ 3 ]
initial
begin
	displaySeg2_expected[3] = 1'bX;
end 
// expected displaySeg2[ 2 ]
initial
begin
	displaySeg2_expected[2] = 1'bX;
end 
// expected displaySeg2[ 1 ]
initial
begin
	displaySeg2_expected[1] = 1'bX;
end 
// expected displaySeg2[ 0 ]
initial
begin
	displaySeg2_expected[0] = 1'bX;
end 

// expected explodiu
initial
begin
	explodiu_expected = 1'bX;
end 
// generate trigger
always @(desarmar_expected or desarmar or displayAux_expected or displayAux or displayCod_expected or displayCod or displayMin1_expected or displayMin1 or displayMin2_expected or displayMin2 or displaySeg1_expected or displaySeg1 or displaySeg2_expected or displaySeg2 or explodiu_expected or explodiu)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected desarmar = %b | expected displayAux = %b | expected displayCod = %b | expected displayMin1 = %b | expected displayMin2 = %b | expected displaySeg1 = %b | expected displaySeg2 = %b | expected explodiu = %b | ",desarmar_expected_prev,displayAux_expected_prev,displayCod_expected_prev,displayMin1_expected_prev,displayMin2_expected_prev,displaySeg1_expected_prev,displaySeg2_expected_prev,explodiu_expected_prev);
	$display("| real desarmar = %b | real displayAux = %b | real displayCod = %b | real displayMin1 = %b | real displayMin2 = %b | real displaySeg1 = %b | real displaySeg2 = %b | real explodiu = %b | ",desarmar_prev,displayAux_prev,displayCod_prev,displayMin1_prev,displayMin2_prev,displaySeg1_prev,displaySeg2_prev,explodiu_prev);
`endif
	if (
		( desarmar_expected_prev !== 1'bx ) && ( desarmar_prev !== desarmar_expected_prev )
		&& ((desarmar_expected_prev !== last_desarmar_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port desarmar :: @time = %t",  $realtime);
		$display ("     Expected value = %b", desarmar_expected_prev);
		$display ("     Real value = %b", desarmar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_desarmar_exp = desarmar_expected_prev;
	end
	if (
		( displayAux_expected_prev[0] !== 1'bx ) && ( displayAux_prev[0] !== displayAux_expected_prev[0] )
		&& ((displayAux_expected_prev[0] !== last_displayAux_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayAux[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayAux_expected_prev);
		$display ("     Real value = %b", displayAux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_displayAux_exp[0] = displayAux_expected_prev[0];
	end
	if (
		( displayAux_expected_prev[1] !== 1'bx ) && ( displayAux_prev[1] !== displayAux_expected_prev[1] )
		&& ((displayAux_expected_prev[1] !== last_displayAux_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayAux[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayAux_expected_prev);
		$display ("     Real value = %b", displayAux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_displayAux_exp[1] = displayAux_expected_prev[1];
	end
	if (
		( displayAux_expected_prev[2] !== 1'bx ) && ( displayAux_prev[2] !== displayAux_expected_prev[2] )
		&& ((displayAux_expected_prev[2] !== last_displayAux_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayAux[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayAux_expected_prev);
		$display ("     Real value = %b", displayAux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_displayAux_exp[2] = displayAux_expected_prev[2];
	end
	if (
		( displayAux_expected_prev[3] !== 1'bx ) && ( displayAux_prev[3] !== displayAux_expected_prev[3] )
		&& ((displayAux_expected_prev[3] !== last_displayAux_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayAux[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayAux_expected_prev);
		$display ("     Real value = %b", displayAux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_displayAux_exp[3] = displayAux_expected_prev[3];
	end
	if (
		( displayAux_expected_prev[4] !== 1'bx ) && ( displayAux_prev[4] !== displayAux_expected_prev[4] )
		&& ((displayAux_expected_prev[4] !== last_displayAux_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayAux[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayAux_expected_prev);
		$display ("     Real value = %b", displayAux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_displayAux_exp[4] = displayAux_expected_prev[4];
	end
	if (
		( displayAux_expected_prev[5] !== 1'bx ) && ( displayAux_prev[5] !== displayAux_expected_prev[5] )
		&& ((displayAux_expected_prev[5] !== last_displayAux_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayAux[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayAux_expected_prev);
		$display ("     Real value = %b", displayAux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_displayAux_exp[5] = displayAux_expected_prev[5];
	end
	if (
		( displayAux_expected_prev[6] !== 1'bx ) && ( displayAux_prev[6] !== displayAux_expected_prev[6] )
		&& ((displayAux_expected_prev[6] !== last_displayAux_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayAux[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayAux_expected_prev);
		$display ("     Real value = %b", displayAux_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_displayAux_exp[6] = displayAux_expected_prev[6];
	end
	if (
		( displayCod_expected_prev[0] !== 1'bx ) && ( displayCod_prev[0] !== displayCod_expected_prev[0] )
		&& ((displayCod_expected_prev[0] !== last_displayCod_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayCod[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayCod_expected_prev);
		$display ("     Real value = %b", displayCod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayCod_exp[0] = displayCod_expected_prev[0];
	end
	if (
		( displayCod_expected_prev[1] !== 1'bx ) && ( displayCod_prev[1] !== displayCod_expected_prev[1] )
		&& ((displayCod_expected_prev[1] !== last_displayCod_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayCod[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayCod_expected_prev);
		$display ("     Real value = %b", displayCod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayCod_exp[1] = displayCod_expected_prev[1];
	end
	if (
		( displayCod_expected_prev[2] !== 1'bx ) && ( displayCod_prev[2] !== displayCod_expected_prev[2] )
		&& ((displayCod_expected_prev[2] !== last_displayCod_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayCod[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayCod_expected_prev);
		$display ("     Real value = %b", displayCod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayCod_exp[2] = displayCod_expected_prev[2];
	end
	if (
		( displayCod_expected_prev[3] !== 1'bx ) && ( displayCod_prev[3] !== displayCod_expected_prev[3] )
		&& ((displayCod_expected_prev[3] !== last_displayCod_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayCod[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayCod_expected_prev);
		$display ("     Real value = %b", displayCod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayCod_exp[3] = displayCod_expected_prev[3];
	end
	if (
		( displayCod_expected_prev[4] !== 1'bx ) && ( displayCod_prev[4] !== displayCod_expected_prev[4] )
		&& ((displayCod_expected_prev[4] !== last_displayCod_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayCod[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayCod_expected_prev);
		$display ("     Real value = %b", displayCod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayCod_exp[4] = displayCod_expected_prev[4];
	end
	if (
		( displayCod_expected_prev[5] !== 1'bx ) && ( displayCod_prev[5] !== displayCod_expected_prev[5] )
		&& ((displayCod_expected_prev[5] !== last_displayCod_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayCod[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayCod_expected_prev);
		$display ("     Real value = %b", displayCod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayCod_exp[5] = displayCod_expected_prev[5];
	end
	if (
		( displayCod_expected_prev[6] !== 1'bx ) && ( displayCod_prev[6] !== displayCod_expected_prev[6] )
		&& ((displayCod_expected_prev[6] !== last_displayCod_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayCod[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayCod_expected_prev);
		$display ("     Real value = %b", displayCod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayCod_exp[6] = displayCod_expected_prev[6];
	end
	if (
		( displayMin1_expected_prev[0] !== 1'bx ) && ( displayMin1_prev[0] !== displayMin1_expected_prev[0] )
		&& ((displayMin1_expected_prev[0] !== last_displayMin1_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayMin1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayMin1_expected_prev);
		$display ("     Real value = %b", displayMin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_displayMin1_exp[0] = displayMin1_expected_prev[0];
	end
	if (
		( displayMin1_expected_prev[1] !== 1'bx ) && ( displayMin1_prev[1] !== displayMin1_expected_prev[1] )
		&& ((displayMin1_expected_prev[1] !== last_displayMin1_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayMin1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayMin1_expected_prev);
		$display ("     Real value = %b", displayMin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_displayMin1_exp[1] = displayMin1_expected_prev[1];
	end
	if (
		( displayMin1_expected_prev[2] !== 1'bx ) && ( displayMin1_prev[2] !== displayMin1_expected_prev[2] )
		&& ((displayMin1_expected_prev[2] !== last_displayMin1_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayMin1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayMin1_expected_prev);
		$display ("     Real value = %b", displayMin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_displayMin1_exp[2] = displayMin1_expected_prev[2];
	end
	if (
		( displayMin1_expected_prev[3] !== 1'bx ) && ( displayMin1_prev[3] !== displayMin1_expected_prev[3] )
		&& ((displayMin1_expected_prev[3] !== last_displayMin1_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayMin1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayMin1_expected_prev);
		$display ("     Real value = %b", displayMin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_displayMin1_exp[3] = displayMin1_expected_prev[3];
	end
	if (
		( displayMin1_expected_prev[4] !== 1'bx ) && ( displayMin1_prev[4] !== displayMin1_expected_prev[4] )
		&& ((displayMin1_expected_prev[4] !== last_displayMin1_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayMin1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayMin1_expected_prev);
		$display ("     Real value = %b", displayMin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_displayMin1_exp[4] = displayMin1_expected_prev[4];
	end
	if (
		( displayMin1_expected_prev[5] !== 1'bx ) && ( displayMin1_prev[5] !== displayMin1_expected_prev[5] )
		&& ((displayMin1_expected_prev[5] !== last_displayMin1_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayMin1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayMin1_expected_prev);
		$display ("     Real value = %b", displayMin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_displayMin1_exp[5] = displayMin1_expected_prev[5];
	end
	if (
		( displayMin1_expected_prev[6] !== 1'bx ) && ( displayMin1_prev[6] !== displayMin1_expected_prev[6] )
		&& ((displayMin1_expected_prev[6] !== last_displayMin1_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayMin1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayMin1_expected_prev);
		$display ("     Real value = %b", displayMin1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_displayMin1_exp[6] = displayMin1_expected_prev[6];
	end
	if (
		( displayMin2_expected_prev[0] !== 1'bx ) && ( displayMin2_prev[0] !== displayMin2_expected_prev[0] )
		&& ((displayMin2_expected_prev[0] !== last_displayMin2_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayMin2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayMin2_expected_prev);
		$display ("     Real value = %b", displayMin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_displayMin2_exp[0] = displayMin2_expected_prev[0];
	end
	if (
		( displayMin2_expected_prev[1] !== 1'bx ) && ( displayMin2_prev[1] !== displayMin2_expected_prev[1] )
		&& ((displayMin2_expected_prev[1] !== last_displayMin2_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayMin2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayMin2_expected_prev);
		$display ("     Real value = %b", displayMin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_displayMin2_exp[1] = displayMin2_expected_prev[1];
	end
	if (
		( displayMin2_expected_prev[2] !== 1'bx ) && ( displayMin2_prev[2] !== displayMin2_expected_prev[2] )
		&& ((displayMin2_expected_prev[2] !== last_displayMin2_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayMin2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayMin2_expected_prev);
		$display ("     Real value = %b", displayMin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_displayMin2_exp[2] = displayMin2_expected_prev[2];
	end
	if (
		( displayMin2_expected_prev[3] !== 1'bx ) && ( displayMin2_prev[3] !== displayMin2_expected_prev[3] )
		&& ((displayMin2_expected_prev[3] !== last_displayMin2_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayMin2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayMin2_expected_prev);
		$display ("     Real value = %b", displayMin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_displayMin2_exp[3] = displayMin2_expected_prev[3];
	end
	if (
		( displayMin2_expected_prev[4] !== 1'bx ) && ( displayMin2_prev[4] !== displayMin2_expected_prev[4] )
		&& ((displayMin2_expected_prev[4] !== last_displayMin2_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayMin2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayMin2_expected_prev);
		$display ("     Real value = %b", displayMin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_displayMin2_exp[4] = displayMin2_expected_prev[4];
	end
	if (
		( displayMin2_expected_prev[5] !== 1'bx ) && ( displayMin2_prev[5] !== displayMin2_expected_prev[5] )
		&& ((displayMin2_expected_prev[5] !== last_displayMin2_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayMin2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayMin2_expected_prev);
		$display ("     Real value = %b", displayMin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_displayMin2_exp[5] = displayMin2_expected_prev[5];
	end
	if (
		( displayMin2_expected_prev[6] !== 1'bx ) && ( displayMin2_prev[6] !== displayMin2_expected_prev[6] )
		&& ((displayMin2_expected_prev[6] !== last_displayMin2_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayMin2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayMin2_expected_prev);
		$display ("     Real value = %b", displayMin2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_displayMin2_exp[6] = displayMin2_expected_prev[6];
	end
	if (
		( displaySeg1_expected_prev[0] !== 1'bx ) && ( displaySeg1_prev[0] !== displaySeg1_expected_prev[0] )
		&& ((displaySeg1_expected_prev[0] !== last_displaySeg1_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displaySeg1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displaySeg1_expected_prev);
		$display ("     Real value = %b", displaySeg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_displaySeg1_exp[0] = displaySeg1_expected_prev[0];
	end
	if (
		( displaySeg1_expected_prev[1] !== 1'bx ) && ( displaySeg1_prev[1] !== displaySeg1_expected_prev[1] )
		&& ((displaySeg1_expected_prev[1] !== last_displaySeg1_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displaySeg1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displaySeg1_expected_prev);
		$display ("     Real value = %b", displaySeg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_displaySeg1_exp[1] = displaySeg1_expected_prev[1];
	end
	if (
		( displaySeg1_expected_prev[2] !== 1'bx ) && ( displaySeg1_prev[2] !== displaySeg1_expected_prev[2] )
		&& ((displaySeg1_expected_prev[2] !== last_displaySeg1_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displaySeg1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displaySeg1_expected_prev);
		$display ("     Real value = %b", displaySeg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_displaySeg1_exp[2] = displaySeg1_expected_prev[2];
	end
	if (
		( displaySeg1_expected_prev[3] !== 1'bx ) && ( displaySeg1_prev[3] !== displaySeg1_expected_prev[3] )
		&& ((displaySeg1_expected_prev[3] !== last_displaySeg1_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displaySeg1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displaySeg1_expected_prev);
		$display ("     Real value = %b", displaySeg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_displaySeg1_exp[3] = displaySeg1_expected_prev[3];
	end
	if (
		( displaySeg1_expected_prev[4] !== 1'bx ) && ( displaySeg1_prev[4] !== displaySeg1_expected_prev[4] )
		&& ((displaySeg1_expected_prev[4] !== last_displaySeg1_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displaySeg1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displaySeg1_expected_prev);
		$display ("     Real value = %b", displaySeg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_displaySeg1_exp[4] = displaySeg1_expected_prev[4];
	end
	if (
		( displaySeg1_expected_prev[5] !== 1'bx ) && ( displaySeg1_prev[5] !== displaySeg1_expected_prev[5] )
		&& ((displaySeg1_expected_prev[5] !== last_displaySeg1_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displaySeg1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displaySeg1_expected_prev);
		$display ("     Real value = %b", displaySeg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_displaySeg1_exp[5] = displaySeg1_expected_prev[5];
	end
	if (
		( displaySeg1_expected_prev[6] !== 1'bx ) && ( displaySeg1_prev[6] !== displaySeg1_expected_prev[6] )
		&& ((displaySeg1_expected_prev[6] !== last_displaySeg1_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displaySeg1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displaySeg1_expected_prev);
		$display ("     Real value = %b", displaySeg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_displaySeg1_exp[6] = displaySeg1_expected_prev[6];
	end
	if (
		( displaySeg2_expected_prev[0] !== 1'bx ) && ( displaySeg2_prev[0] !== displaySeg2_expected_prev[0] )
		&& ((displaySeg2_expected_prev[0] !== last_displaySeg2_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displaySeg2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displaySeg2_expected_prev);
		$display ("     Real value = %b", displaySeg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_displaySeg2_exp[0] = displaySeg2_expected_prev[0];
	end
	if (
		( displaySeg2_expected_prev[1] !== 1'bx ) && ( displaySeg2_prev[1] !== displaySeg2_expected_prev[1] )
		&& ((displaySeg2_expected_prev[1] !== last_displaySeg2_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displaySeg2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displaySeg2_expected_prev);
		$display ("     Real value = %b", displaySeg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_displaySeg2_exp[1] = displaySeg2_expected_prev[1];
	end
	if (
		( displaySeg2_expected_prev[2] !== 1'bx ) && ( displaySeg2_prev[2] !== displaySeg2_expected_prev[2] )
		&& ((displaySeg2_expected_prev[2] !== last_displaySeg2_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displaySeg2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displaySeg2_expected_prev);
		$display ("     Real value = %b", displaySeg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_displaySeg2_exp[2] = displaySeg2_expected_prev[2];
	end
	if (
		( displaySeg2_expected_prev[3] !== 1'bx ) && ( displaySeg2_prev[3] !== displaySeg2_expected_prev[3] )
		&& ((displaySeg2_expected_prev[3] !== last_displaySeg2_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displaySeg2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displaySeg2_expected_prev);
		$display ("     Real value = %b", displaySeg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_displaySeg2_exp[3] = displaySeg2_expected_prev[3];
	end
	if (
		( displaySeg2_expected_prev[4] !== 1'bx ) && ( displaySeg2_prev[4] !== displaySeg2_expected_prev[4] )
		&& ((displaySeg2_expected_prev[4] !== last_displaySeg2_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displaySeg2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displaySeg2_expected_prev);
		$display ("     Real value = %b", displaySeg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_displaySeg2_exp[4] = displaySeg2_expected_prev[4];
	end
	if (
		( displaySeg2_expected_prev[5] !== 1'bx ) && ( displaySeg2_prev[5] !== displaySeg2_expected_prev[5] )
		&& ((displaySeg2_expected_prev[5] !== last_displaySeg2_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displaySeg2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displaySeg2_expected_prev);
		$display ("     Real value = %b", displaySeg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_displaySeg2_exp[5] = displaySeg2_expected_prev[5];
	end
	if (
		( displaySeg2_expected_prev[6] !== 1'bx ) && ( displaySeg2_prev[6] !== displaySeg2_expected_prev[6] )
		&& ((displaySeg2_expected_prev[6] !== last_displaySeg2_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displaySeg2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displaySeg2_expected_prev);
		$display ("     Real value = %b", displaySeg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_displaySeg2_exp[6] = displaySeg2_expected_prev[6];
	end
	if (
		( explodiu_expected_prev !== 1'bx ) && ( explodiu_prev !== explodiu_expected_prev )
		&& ((explodiu_expected_prev !== last_explodiu_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port explodiu :: @time = %t",  $realtime);
		$display ("     Expected value = %b", explodiu_expected_prev);
		$display ("     Real value = %b", explodiu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_explodiu_exp = explodiu_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module bombaNova_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [3:0] codEntrada;
reg [4:0] fios;
reg [1:0] selCont;
reg [1:0] selOp;
reg setCont;
reg setDesarme;
reg setInDesarme;
// wires                                               
wire desarmar;
wire [6:0] displayAux;
wire [6:0] displayCod;
wire [6:0] displayMin1;
wire [6:0] displayMin2;
wire [6:0] displaySeg1;
wire [6:0] displaySeg2;
wire explodiu;

wire sampler;                             

// assign statements (if any)                          
bombaNova i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.codEntrada(codEntrada),
	.desarmar(desarmar),
	.displayAux(displayAux),
	.displayCod(displayCod),
	.displayMin1(displayMin1),
	.displayMin2(displayMin2),
	.displaySeg1(displaySeg1),
	.displaySeg2(displaySeg2),
	.explodiu(explodiu),
	.fios(fios),
	.selCont(selCont),
	.selOp(selOp),
	.setCont(setCont),
	.setDesarme(setDesarme),
	.setInDesarme(setInDesarme)
);

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// codEntrada[ 3 ]
initial
begin
	codEntrada[3] = 1'b0;
end 
// codEntrada[ 2 ]
initial
begin
	codEntrada[2] = 1'b0;
end 
// codEntrada[ 1 ]
initial
begin
	codEntrada[1] = 1'b0;
end 
// codEntrada[ 0 ]
initial
begin
	codEntrada[0] = 1'b0;
end 
// fios[ 4 ]
initial
begin
	fios[4] = 1'b0;
end 
// fios[ 3 ]
initial
begin
	fios[3] = 1'b0;
end 
// fios[ 2 ]
initial
begin
	fios[2] = 1'b0;
end 
// fios[ 1 ]
initial
begin
	fios[1] = 1'b0;
end 
// fios[ 0 ]
initial
begin
	fios[0] = 1'b0;
end 
// selCont[ 1 ]
initial
begin
	selCont[1] = 1'b0;
end 
// selCont[ 0 ]
initial
begin
	selCont[0] = 1'b0;
end 
// selOp[ 1 ]
initial
begin
	selOp[1] = 1'b0;
end 
// selOp[ 0 ]
initial
begin
	selOp[0] = 1'b0;
end 

// setCont
initial
begin
	setCont = 1'b0;
end 

// setDesarme
initial
begin
	setDesarme = 1'b0;
end 

// setInDesarme
initial
begin
	setInDesarme = 1'b0;
end 

bombaNova_vlg_sample_tst tb_sample (
	.clock(clock),
	.codEntrada(codEntrada),
	.fios(fios),
	.selCont(selCont),
	.selOp(selOp),
	.setCont(setCont),
	.setDesarme(setDesarme),
	.setInDesarme(setInDesarme),
	.sampler_tx(sampler)
);

bombaNova_vlg_check_tst tb_out(
	.desarmar(desarmar),
	.displayAux(displayAux),
	.displayCod(displayCod),
	.displayMin1(displayMin1),
	.displayMin2(displayMin2),
	.displaySeg1(displaySeg1),
	.displaySeg2(displaySeg2),
	.explodiu(explodiu),
	.sampler_rx(sampler)
);
endmodule

