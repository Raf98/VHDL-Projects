// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/06/2018 22:58:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ULA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ULA_vlg_sample_tst(
	A,
	B,
	F,
	sampler_tx
);
input [3:0] A;
input [3:0] B;
input [2:0] F;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or F)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ULA_vlg_check_tst (
	display7,
	display72,
	VLED,
	Z,
	sampler_rx
);
input [6:0] display7;
input [6:0] display72;
input  VLED;
input  Z;
input sampler_rx;

reg [6:0] display7_expected;
reg [6:0] display72_expected;
reg  VLED_expected;
reg  Z_expected;

reg [6:0] display7_prev;
reg [6:0] display72_prev;
reg  VLED_prev;
reg  Z_prev;

reg [6:0] display7_expected_prev;
reg [6:0] display72_expected_prev;
reg  VLED_expected_prev;
reg  Z_expected_prev;

reg [6:0] last_display7_exp;
reg [6:0] last_display72_exp;
reg  last_VLED_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	display7_prev = display7;
	display72_prev = display72;
	VLED_prev = VLED;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	display7_expected_prev = display7_expected;
	display72_expected_prev = display72_expected;
	VLED_expected_prev = VLED_expected;
	Z_expected_prev = Z_expected;
end


// expected display7[ 6 ]
initial
begin
	display7_expected[6] = 1'bX;
end 
// expected display7[ 5 ]
initial
begin
	display7_expected[5] = 1'bX;
end 
// expected display7[ 4 ]
initial
begin
	display7_expected[4] = 1'bX;
end 
// expected display7[ 3 ]
initial
begin
	display7_expected[3] = 1'bX;
end 
// expected display7[ 2 ]
initial
begin
	display7_expected[2] = 1'bX;
end 
// expected display7[ 1 ]
initial
begin
	display7_expected[1] = 1'bX;
end 
// expected display7[ 0 ]
initial
begin
	display7_expected[0] = 1'bX;
end 
// expected display72[ 6 ]
initial
begin
	display72_expected[6] = 1'bX;
end 
// expected display72[ 5 ]
initial
begin
	display72_expected[5] = 1'bX;
end 
// expected display72[ 4 ]
initial
begin
	display72_expected[4] = 1'bX;
end 
// expected display72[ 3 ]
initial
begin
	display72_expected[3] = 1'bX;
end 
// expected display72[ 2 ]
initial
begin
	display72_expected[2] = 1'bX;
end 
// expected display72[ 1 ]
initial
begin
	display72_expected[1] = 1'bX;
end 
// expected display72[ 0 ]
initial
begin
	display72_expected[0] = 1'bX;
end 

// expected VLED
initial
begin
	VLED_expected = 1'bX;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
end 
// generate trigger
always @(display7_expected or display7 or display72_expected or display72 or VLED_expected or VLED or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected display7 = %b | expected display72 = %b | expected VLED = %b | expected Z = %b | ",display7_expected_prev,display72_expected_prev,VLED_expected_prev,Z_expected_prev);
	$display("| real display7 = %b | real display72 = %b | real VLED = %b | real Z = %b | ",display7_prev,display72_prev,VLED_prev,Z_prev);
`endif
	if (
		( display7_expected_prev[0] !== 1'bx ) && ( display7_prev[0] !== display7_expected_prev[0] )
		&& ((display7_expected_prev[0] !== last_display7_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7_exp[0] = display7_expected_prev[0];
	end
	if (
		( display7_expected_prev[1] !== 1'bx ) && ( display7_prev[1] !== display7_expected_prev[1] )
		&& ((display7_expected_prev[1] !== last_display7_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7_exp[1] = display7_expected_prev[1];
	end
	if (
		( display7_expected_prev[2] !== 1'bx ) && ( display7_prev[2] !== display7_expected_prev[2] )
		&& ((display7_expected_prev[2] !== last_display7_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7_exp[2] = display7_expected_prev[2];
	end
	if (
		( display7_expected_prev[3] !== 1'bx ) && ( display7_prev[3] !== display7_expected_prev[3] )
		&& ((display7_expected_prev[3] !== last_display7_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7_exp[3] = display7_expected_prev[3];
	end
	if (
		( display7_expected_prev[4] !== 1'bx ) && ( display7_prev[4] !== display7_expected_prev[4] )
		&& ((display7_expected_prev[4] !== last_display7_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7_exp[4] = display7_expected_prev[4];
	end
	if (
		( display7_expected_prev[5] !== 1'bx ) && ( display7_prev[5] !== display7_expected_prev[5] )
		&& ((display7_expected_prev[5] !== last_display7_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7_exp[5] = display7_expected_prev[5];
	end
	if (
		( display7_expected_prev[6] !== 1'bx ) && ( display7_prev[6] !== display7_expected_prev[6] )
		&& ((display7_expected_prev[6] !== last_display7_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7_exp[6] = display7_expected_prev[6];
	end
	if (
		( display72_expected_prev[0] !== 1'bx ) && ( display72_prev[0] !== display72_expected_prev[0] )
		&& ((display72_expected_prev[0] !== last_display72_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display72[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display72_expected_prev);
		$display ("     Real value = %b", display72_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display72_exp[0] = display72_expected_prev[0];
	end
	if (
		( display72_expected_prev[1] !== 1'bx ) && ( display72_prev[1] !== display72_expected_prev[1] )
		&& ((display72_expected_prev[1] !== last_display72_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display72[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display72_expected_prev);
		$display ("     Real value = %b", display72_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display72_exp[1] = display72_expected_prev[1];
	end
	if (
		( display72_expected_prev[2] !== 1'bx ) && ( display72_prev[2] !== display72_expected_prev[2] )
		&& ((display72_expected_prev[2] !== last_display72_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display72[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display72_expected_prev);
		$display ("     Real value = %b", display72_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display72_exp[2] = display72_expected_prev[2];
	end
	if (
		( display72_expected_prev[3] !== 1'bx ) && ( display72_prev[3] !== display72_expected_prev[3] )
		&& ((display72_expected_prev[3] !== last_display72_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display72[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display72_expected_prev);
		$display ("     Real value = %b", display72_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display72_exp[3] = display72_expected_prev[3];
	end
	if (
		( display72_expected_prev[4] !== 1'bx ) && ( display72_prev[4] !== display72_expected_prev[4] )
		&& ((display72_expected_prev[4] !== last_display72_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display72[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display72_expected_prev);
		$display ("     Real value = %b", display72_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display72_exp[4] = display72_expected_prev[4];
	end
	if (
		( display72_expected_prev[5] !== 1'bx ) && ( display72_prev[5] !== display72_expected_prev[5] )
		&& ((display72_expected_prev[5] !== last_display72_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display72[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display72_expected_prev);
		$display ("     Real value = %b", display72_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display72_exp[5] = display72_expected_prev[5];
	end
	if (
		( display72_expected_prev[6] !== 1'bx ) && ( display72_prev[6] !== display72_expected_prev[6] )
		&& ((display72_expected_prev[6] !== last_display72_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display72[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display72_expected_prev);
		$display ("     Real value = %b", display72_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display72_exp[6] = display72_expected_prev[6];
	end
	if (
		( VLED_expected_prev !== 1'bx ) && ( VLED_prev !== VLED_expected_prev )
		&& ((VLED_expected_prev !== last_VLED_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VLED :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VLED_expected_prev);
		$display ("     Real value = %b", VLED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_VLED_exp = VLED_expected_prev;
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ULA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A;
reg [3:0] B;
reg [2:0] F;
// wires                                               
wire [6:0] display7;
wire [6:0] display72;
wire VLED;
wire Z;

wire sampler;                             

// assign statements (if any)                          
ULA i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.display7(display7),
	.display72(display72),
	.F(F),
	.VLED(VLED),
	.Z(Z)
);
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #30000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #25000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #15000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #15000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #15000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #15000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #30000 1'b0;
	A[3] = #15000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #15000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #25000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #15000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #15000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #25000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #15000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #15000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #15000 1'b0;
	A[3] = #15000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #25000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #25000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #20000 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #25000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #10000 1'b0;
	A[3] = #10000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #5000 1'b1;
	A[3] = #5000 1'b0;
	A[3] = #10000 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #15000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #25000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #15000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #15000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #15000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #15000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #15000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #30000 1'b1;
	A[2] = #30000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #25000 1'b0;
	A[2] = #25000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #15000 1'b0;
	A[2] = #15000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #15000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #25000 1'b1;
	A[2] = #30000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #15000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #10000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #25000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #15000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #20000 1'b0;
	A[2] = #5000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #10000 1'b1;
	A[2] = #5000 1'b0;
	A[2] = #30000 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #15000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #15000 1'b0;
	A[1] = #15000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #15000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #15000 1'b0;
	A[1] = #15000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #15000 1'b1;
	A[1] = #15000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #15000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #25000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #15000 1'b1;
	A[1] = #15000 1'b0;
	A[1] = #20000 1'b1;
	A[1] = #35000 1'b0;
	A[1] = #15000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #15000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #15000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #15000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #15000 1'b1;
	A[1] = #20000 1'b0;
	A[1] = #15000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #10000 1'b0;
	A[1] = #5000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #10000 1'b1;
	A[1] = #5000 1'b0;
	A[1] = #10000 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #15000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #15000 1'b1;
	A[0] = #40000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #15000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #35000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #20000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #15000 1'b1;
	A[0] = #25000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #15000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #15000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #15000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #15000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #15000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #15000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #15000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #20000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #10000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #15000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #15000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #25000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #15000 1'b0;
	A[0] = #15000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #15000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #10000 1'b1;
	A[0] = #15000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #15000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #65000 1'b0;
	A[0] = #5000 1'b1;
	A[0] = #5000 1'b0;
	A[0] = #10000 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #40000 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #30000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #15000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #15000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #30000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #15000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #15000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #25000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #35000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #30000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #10000 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #15000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #15000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #15000 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #25000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #30000 1'b0;
	B[3] = #25000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #15000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #5000 1'b0;
	B[3] = #5000 1'b1;
	B[3] = #20000 1'b0;
	B[3] = #10000 1'b1;
	B[3] = #5000 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #15000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #15000 1'b0;
	B[2] = #15000 1'b1;
	B[2] = #15000 1'b0;
	B[2] = #15000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #15000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #15000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #15000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #30000 1'b1;
	B[2] = #15000 1'b0;
	B[2] = #15000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #15000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #35000 1'b0;
	B[2] = #15000 1'b1;
	B[2] = #15000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #15000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #15000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #30000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #5000 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #5000 1'b1;
	B[2] = #20000 1'b0;
	B[2] = #10000 1'b1;
	B[2] = #10000 1'b0;
	B[2] = #10000 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #15000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #15000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #30000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #15000 1'b1;
	B[1] = #15000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #25000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #15000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #15000 1'b0;
	B[1] = #20000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #30000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #20000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #15000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #20000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #25000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #20000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #15000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #10000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #20000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #20000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #15000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #15000 1'b1;
	B[1] = #5000 1'b0;
	B[1] = #5000 1'b1;
	B[1] = #10000 1'b0;
	B[1] = #5000 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #15000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #15000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #35000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #40000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #15000 1'b1;
	B[0] = #15000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #15000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #15000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #15000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #20000 1'b1;
	B[0] = #15000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #35000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #20000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #20000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #15000 1'b1;
	B[0] = #15000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #20000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #15000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #15000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #40000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #35000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #30000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #10000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #5000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #10000 1'b1;
	B[0] = #5000 1'b0;
	B[0] = #5000 1'b1;
end 
// F[ 2 ]
initial
begin
	repeat(12)
	begin
		F[2] = 1'b0;
		F[2] = #40000 1'b1;
		# 40000;
	end
	F[2] = 1'b0;
end 
// F[ 1 ]
always
begin
	F[1] = 1'b0;
	F[1] = #20000 1'b1;
	#20000;
end 
// F[ 0 ]
always
begin
	F[0] = 1'b0;
	F[0] = #10000 1'b1;
	#10000;
end 

ULA_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.F(F),
	.sampler_tx(sampler)
);

ULA_vlg_check_tst tb_out(
	.display7(display7),
	.display72(display72),
	.VLED(VLED),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

