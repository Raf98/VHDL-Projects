// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/12/2019 11:24:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Matrix
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Matrix_vlg_sample_tst(
	a,
	b,
	sampler_tx
);
input [31:0] a;
input [31:0] b;
output sampler_tx;

reg sample;
time current_time;
always @(a or b)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Matrix_vlg_check_tst (
	m,
	sampler_rx
);
input [63:0] m;
input sampler_rx;

reg [63:0] m_expected;

reg [63:0] m_prev;

reg [63:0] m_expected_prev;

reg [63:0] last_m_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	m_prev = m;
end

// update expected /o prevs

always @(trigger)
begin
	m_expected_prev = m_expected;
end


// expected m[ 63 ]
initial
begin
	m_expected[63] = 1'bX;
end 
// expected m[ 62 ]
initial
begin
	m_expected[62] = 1'bX;
end 
// expected m[ 61 ]
initial
begin
	m_expected[61] = 1'bX;
end 
// expected m[ 60 ]
initial
begin
	m_expected[60] = 1'bX;
end 
// expected m[ 59 ]
initial
begin
	m_expected[59] = 1'bX;
end 
// expected m[ 58 ]
initial
begin
	m_expected[58] = 1'bX;
end 
// expected m[ 57 ]
initial
begin
	m_expected[57] = 1'bX;
end 
// expected m[ 56 ]
initial
begin
	m_expected[56] = 1'bX;
end 
// expected m[ 55 ]
initial
begin
	m_expected[55] = 1'bX;
end 
// expected m[ 54 ]
initial
begin
	m_expected[54] = 1'bX;
end 
// expected m[ 53 ]
initial
begin
	m_expected[53] = 1'bX;
end 
// expected m[ 52 ]
initial
begin
	m_expected[52] = 1'bX;
end 
// expected m[ 51 ]
initial
begin
	m_expected[51] = 1'bX;
end 
// expected m[ 50 ]
initial
begin
	m_expected[50] = 1'bX;
end 
// expected m[ 49 ]
initial
begin
	m_expected[49] = 1'bX;
end 
// expected m[ 48 ]
initial
begin
	m_expected[48] = 1'bX;
end 
// expected m[ 47 ]
initial
begin
	m_expected[47] = 1'bX;
end 
// expected m[ 46 ]
initial
begin
	m_expected[46] = 1'bX;
end 
// expected m[ 45 ]
initial
begin
	m_expected[45] = 1'bX;
end 
// expected m[ 44 ]
initial
begin
	m_expected[44] = 1'bX;
end 
// expected m[ 43 ]
initial
begin
	m_expected[43] = 1'bX;
end 
// expected m[ 42 ]
initial
begin
	m_expected[42] = 1'bX;
end 
// expected m[ 41 ]
initial
begin
	m_expected[41] = 1'bX;
end 
// expected m[ 40 ]
initial
begin
	m_expected[40] = 1'bX;
end 
// expected m[ 39 ]
initial
begin
	m_expected[39] = 1'bX;
end 
// expected m[ 38 ]
initial
begin
	m_expected[38] = 1'bX;
end 
// expected m[ 37 ]
initial
begin
	m_expected[37] = 1'bX;
end 
// expected m[ 36 ]
initial
begin
	m_expected[36] = 1'bX;
end 
// expected m[ 35 ]
initial
begin
	m_expected[35] = 1'bX;
end 
// expected m[ 34 ]
initial
begin
	m_expected[34] = 1'bX;
end 
// expected m[ 33 ]
initial
begin
	m_expected[33] = 1'bX;
end 
// expected m[ 32 ]
initial
begin
	m_expected[32] = 1'bX;
end 
// expected m[ 31 ]
initial
begin
	m_expected[31] = 1'bX;
end 
// expected m[ 30 ]
initial
begin
	m_expected[30] = 1'bX;
end 
// expected m[ 29 ]
initial
begin
	m_expected[29] = 1'bX;
end 
// expected m[ 28 ]
initial
begin
	m_expected[28] = 1'bX;
end 
// expected m[ 27 ]
initial
begin
	m_expected[27] = 1'bX;
end 
// expected m[ 26 ]
initial
begin
	m_expected[26] = 1'bX;
end 
// expected m[ 25 ]
initial
begin
	m_expected[25] = 1'bX;
end 
// expected m[ 24 ]
initial
begin
	m_expected[24] = 1'bX;
end 
// expected m[ 23 ]
initial
begin
	m_expected[23] = 1'bX;
end 
// expected m[ 22 ]
initial
begin
	m_expected[22] = 1'bX;
end 
// expected m[ 21 ]
initial
begin
	m_expected[21] = 1'bX;
end 
// expected m[ 20 ]
initial
begin
	m_expected[20] = 1'bX;
end 
// expected m[ 19 ]
initial
begin
	m_expected[19] = 1'bX;
end 
// expected m[ 18 ]
initial
begin
	m_expected[18] = 1'bX;
end 
// expected m[ 17 ]
initial
begin
	m_expected[17] = 1'bX;
end 
// expected m[ 16 ]
initial
begin
	m_expected[16] = 1'bX;
end 
// expected m[ 15 ]
initial
begin
	m_expected[15] = 1'bX;
end 
// expected m[ 14 ]
initial
begin
	m_expected[14] = 1'bX;
end 
// expected m[ 13 ]
initial
begin
	m_expected[13] = 1'bX;
end 
// expected m[ 12 ]
initial
begin
	m_expected[12] = 1'bX;
end 
// expected m[ 11 ]
initial
begin
	m_expected[11] = 1'bX;
end 
// expected m[ 10 ]
initial
begin
	m_expected[10] = 1'bX;
end 
// expected m[ 9 ]
initial
begin
	m_expected[9] = 1'bX;
end 
// expected m[ 8 ]
initial
begin
	m_expected[8] = 1'bX;
end 
// expected m[ 7 ]
initial
begin
	m_expected[7] = 1'bX;
end 
// expected m[ 6 ]
initial
begin
	m_expected[6] = 1'bX;
end 
// expected m[ 5 ]
initial
begin
	m_expected[5] = 1'bX;
end 
// expected m[ 4 ]
initial
begin
	m_expected[4] = 1'bX;
end 
// expected m[ 3 ]
initial
begin
	m_expected[3] = 1'bX;
end 
// expected m[ 2 ]
initial
begin
	m_expected[2] = 1'bX;
end 
// expected m[ 1 ]
initial
begin
	m_expected[1] = 1'bX;
end 
// expected m[ 0 ]
initial
begin
	m_expected[0] = 1'bX;
end 
// generate trigger
always @(m_expected or m)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected m = %b | ",m_expected_prev);
	$display("| real m = %b | ",m_prev);
`endif
	if (
		( m_expected_prev[0] !== 1'bx ) && ( m_prev[0] !== m_expected_prev[0] )
		&& ((m_expected_prev[0] !== last_m_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[0] = m_expected_prev[0];
	end
	if (
		( m_expected_prev[1] !== 1'bx ) && ( m_prev[1] !== m_expected_prev[1] )
		&& ((m_expected_prev[1] !== last_m_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[1] = m_expected_prev[1];
	end
	if (
		( m_expected_prev[2] !== 1'bx ) && ( m_prev[2] !== m_expected_prev[2] )
		&& ((m_expected_prev[2] !== last_m_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[2] = m_expected_prev[2];
	end
	if (
		( m_expected_prev[3] !== 1'bx ) && ( m_prev[3] !== m_expected_prev[3] )
		&& ((m_expected_prev[3] !== last_m_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[3] = m_expected_prev[3];
	end
	if (
		( m_expected_prev[4] !== 1'bx ) && ( m_prev[4] !== m_expected_prev[4] )
		&& ((m_expected_prev[4] !== last_m_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[4] = m_expected_prev[4];
	end
	if (
		( m_expected_prev[5] !== 1'bx ) && ( m_prev[5] !== m_expected_prev[5] )
		&& ((m_expected_prev[5] !== last_m_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[5] = m_expected_prev[5];
	end
	if (
		( m_expected_prev[6] !== 1'bx ) && ( m_prev[6] !== m_expected_prev[6] )
		&& ((m_expected_prev[6] !== last_m_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[6] = m_expected_prev[6];
	end
	if (
		( m_expected_prev[7] !== 1'bx ) && ( m_prev[7] !== m_expected_prev[7] )
		&& ((m_expected_prev[7] !== last_m_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[7] = m_expected_prev[7];
	end
	if (
		( m_expected_prev[8] !== 1'bx ) && ( m_prev[8] !== m_expected_prev[8] )
		&& ((m_expected_prev[8] !== last_m_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[8] = m_expected_prev[8];
	end
	if (
		( m_expected_prev[9] !== 1'bx ) && ( m_prev[9] !== m_expected_prev[9] )
		&& ((m_expected_prev[9] !== last_m_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[9] = m_expected_prev[9];
	end
	if (
		( m_expected_prev[10] !== 1'bx ) && ( m_prev[10] !== m_expected_prev[10] )
		&& ((m_expected_prev[10] !== last_m_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[10] = m_expected_prev[10];
	end
	if (
		( m_expected_prev[11] !== 1'bx ) && ( m_prev[11] !== m_expected_prev[11] )
		&& ((m_expected_prev[11] !== last_m_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[11] = m_expected_prev[11];
	end
	if (
		( m_expected_prev[12] !== 1'bx ) && ( m_prev[12] !== m_expected_prev[12] )
		&& ((m_expected_prev[12] !== last_m_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[12] = m_expected_prev[12];
	end
	if (
		( m_expected_prev[13] !== 1'bx ) && ( m_prev[13] !== m_expected_prev[13] )
		&& ((m_expected_prev[13] !== last_m_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[13] = m_expected_prev[13];
	end
	if (
		( m_expected_prev[14] !== 1'bx ) && ( m_prev[14] !== m_expected_prev[14] )
		&& ((m_expected_prev[14] !== last_m_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[14] = m_expected_prev[14];
	end
	if (
		( m_expected_prev[15] !== 1'bx ) && ( m_prev[15] !== m_expected_prev[15] )
		&& ((m_expected_prev[15] !== last_m_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[15] = m_expected_prev[15];
	end
	if (
		( m_expected_prev[16] !== 1'bx ) && ( m_prev[16] !== m_expected_prev[16] )
		&& ((m_expected_prev[16] !== last_m_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[16] = m_expected_prev[16];
	end
	if (
		( m_expected_prev[17] !== 1'bx ) && ( m_prev[17] !== m_expected_prev[17] )
		&& ((m_expected_prev[17] !== last_m_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[17] = m_expected_prev[17];
	end
	if (
		( m_expected_prev[18] !== 1'bx ) && ( m_prev[18] !== m_expected_prev[18] )
		&& ((m_expected_prev[18] !== last_m_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[18] = m_expected_prev[18];
	end
	if (
		( m_expected_prev[19] !== 1'bx ) && ( m_prev[19] !== m_expected_prev[19] )
		&& ((m_expected_prev[19] !== last_m_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[19] = m_expected_prev[19];
	end
	if (
		( m_expected_prev[20] !== 1'bx ) && ( m_prev[20] !== m_expected_prev[20] )
		&& ((m_expected_prev[20] !== last_m_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[20] = m_expected_prev[20];
	end
	if (
		( m_expected_prev[21] !== 1'bx ) && ( m_prev[21] !== m_expected_prev[21] )
		&& ((m_expected_prev[21] !== last_m_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[21] = m_expected_prev[21];
	end
	if (
		( m_expected_prev[22] !== 1'bx ) && ( m_prev[22] !== m_expected_prev[22] )
		&& ((m_expected_prev[22] !== last_m_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[22] = m_expected_prev[22];
	end
	if (
		( m_expected_prev[23] !== 1'bx ) && ( m_prev[23] !== m_expected_prev[23] )
		&& ((m_expected_prev[23] !== last_m_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[23] = m_expected_prev[23];
	end
	if (
		( m_expected_prev[24] !== 1'bx ) && ( m_prev[24] !== m_expected_prev[24] )
		&& ((m_expected_prev[24] !== last_m_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[24] = m_expected_prev[24];
	end
	if (
		( m_expected_prev[25] !== 1'bx ) && ( m_prev[25] !== m_expected_prev[25] )
		&& ((m_expected_prev[25] !== last_m_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[25] = m_expected_prev[25];
	end
	if (
		( m_expected_prev[26] !== 1'bx ) && ( m_prev[26] !== m_expected_prev[26] )
		&& ((m_expected_prev[26] !== last_m_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[26] = m_expected_prev[26];
	end
	if (
		( m_expected_prev[27] !== 1'bx ) && ( m_prev[27] !== m_expected_prev[27] )
		&& ((m_expected_prev[27] !== last_m_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[27] = m_expected_prev[27];
	end
	if (
		( m_expected_prev[28] !== 1'bx ) && ( m_prev[28] !== m_expected_prev[28] )
		&& ((m_expected_prev[28] !== last_m_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[28] = m_expected_prev[28];
	end
	if (
		( m_expected_prev[29] !== 1'bx ) && ( m_prev[29] !== m_expected_prev[29] )
		&& ((m_expected_prev[29] !== last_m_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[29] = m_expected_prev[29];
	end
	if (
		( m_expected_prev[30] !== 1'bx ) && ( m_prev[30] !== m_expected_prev[30] )
		&& ((m_expected_prev[30] !== last_m_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[30] = m_expected_prev[30];
	end
	if (
		( m_expected_prev[31] !== 1'bx ) && ( m_prev[31] !== m_expected_prev[31] )
		&& ((m_expected_prev[31] !== last_m_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[31] = m_expected_prev[31];
	end
	if (
		( m_expected_prev[32] !== 1'bx ) && ( m_prev[32] !== m_expected_prev[32] )
		&& ((m_expected_prev[32] !== last_m_exp[32]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[32] = m_expected_prev[32];
	end
	if (
		( m_expected_prev[33] !== 1'bx ) && ( m_prev[33] !== m_expected_prev[33] )
		&& ((m_expected_prev[33] !== last_m_exp[33]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[33] = m_expected_prev[33];
	end
	if (
		( m_expected_prev[34] !== 1'bx ) && ( m_prev[34] !== m_expected_prev[34] )
		&& ((m_expected_prev[34] !== last_m_exp[34]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[34] = m_expected_prev[34];
	end
	if (
		( m_expected_prev[35] !== 1'bx ) && ( m_prev[35] !== m_expected_prev[35] )
		&& ((m_expected_prev[35] !== last_m_exp[35]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[35] = m_expected_prev[35];
	end
	if (
		( m_expected_prev[36] !== 1'bx ) && ( m_prev[36] !== m_expected_prev[36] )
		&& ((m_expected_prev[36] !== last_m_exp[36]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[36] = m_expected_prev[36];
	end
	if (
		( m_expected_prev[37] !== 1'bx ) && ( m_prev[37] !== m_expected_prev[37] )
		&& ((m_expected_prev[37] !== last_m_exp[37]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[37] = m_expected_prev[37];
	end
	if (
		( m_expected_prev[38] !== 1'bx ) && ( m_prev[38] !== m_expected_prev[38] )
		&& ((m_expected_prev[38] !== last_m_exp[38]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[38] = m_expected_prev[38];
	end
	if (
		( m_expected_prev[39] !== 1'bx ) && ( m_prev[39] !== m_expected_prev[39] )
		&& ((m_expected_prev[39] !== last_m_exp[39]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[39] = m_expected_prev[39];
	end
	if (
		( m_expected_prev[40] !== 1'bx ) && ( m_prev[40] !== m_expected_prev[40] )
		&& ((m_expected_prev[40] !== last_m_exp[40]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[40] = m_expected_prev[40];
	end
	if (
		( m_expected_prev[41] !== 1'bx ) && ( m_prev[41] !== m_expected_prev[41] )
		&& ((m_expected_prev[41] !== last_m_exp[41]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[41] = m_expected_prev[41];
	end
	if (
		( m_expected_prev[42] !== 1'bx ) && ( m_prev[42] !== m_expected_prev[42] )
		&& ((m_expected_prev[42] !== last_m_exp[42]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[42] = m_expected_prev[42];
	end
	if (
		( m_expected_prev[43] !== 1'bx ) && ( m_prev[43] !== m_expected_prev[43] )
		&& ((m_expected_prev[43] !== last_m_exp[43]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[43] = m_expected_prev[43];
	end
	if (
		( m_expected_prev[44] !== 1'bx ) && ( m_prev[44] !== m_expected_prev[44] )
		&& ((m_expected_prev[44] !== last_m_exp[44]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[44] = m_expected_prev[44];
	end
	if (
		( m_expected_prev[45] !== 1'bx ) && ( m_prev[45] !== m_expected_prev[45] )
		&& ((m_expected_prev[45] !== last_m_exp[45]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[45] = m_expected_prev[45];
	end
	if (
		( m_expected_prev[46] !== 1'bx ) && ( m_prev[46] !== m_expected_prev[46] )
		&& ((m_expected_prev[46] !== last_m_exp[46]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[46] = m_expected_prev[46];
	end
	if (
		( m_expected_prev[47] !== 1'bx ) && ( m_prev[47] !== m_expected_prev[47] )
		&& ((m_expected_prev[47] !== last_m_exp[47]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[47] = m_expected_prev[47];
	end
	if (
		( m_expected_prev[48] !== 1'bx ) && ( m_prev[48] !== m_expected_prev[48] )
		&& ((m_expected_prev[48] !== last_m_exp[48]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[48] = m_expected_prev[48];
	end
	if (
		( m_expected_prev[49] !== 1'bx ) && ( m_prev[49] !== m_expected_prev[49] )
		&& ((m_expected_prev[49] !== last_m_exp[49]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[49] = m_expected_prev[49];
	end
	if (
		( m_expected_prev[50] !== 1'bx ) && ( m_prev[50] !== m_expected_prev[50] )
		&& ((m_expected_prev[50] !== last_m_exp[50]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[50] = m_expected_prev[50];
	end
	if (
		( m_expected_prev[51] !== 1'bx ) && ( m_prev[51] !== m_expected_prev[51] )
		&& ((m_expected_prev[51] !== last_m_exp[51]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[51] = m_expected_prev[51];
	end
	if (
		( m_expected_prev[52] !== 1'bx ) && ( m_prev[52] !== m_expected_prev[52] )
		&& ((m_expected_prev[52] !== last_m_exp[52]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[52] = m_expected_prev[52];
	end
	if (
		( m_expected_prev[53] !== 1'bx ) && ( m_prev[53] !== m_expected_prev[53] )
		&& ((m_expected_prev[53] !== last_m_exp[53]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[53] = m_expected_prev[53];
	end
	if (
		( m_expected_prev[54] !== 1'bx ) && ( m_prev[54] !== m_expected_prev[54] )
		&& ((m_expected_prev[54] !== last_m_exp[54]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[54] = m_expected_prev[54];
	end
	if (
		( m_expected_prev[55] !== 1'bx ) && ( m_prev[55] !== m_expected_prev[55] )
		&& ((m_expected_prev[55] !== last_m_exp[55]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[55] = m_expected_prev[55];
	end
	if (
		( m_expected_prev[56] !== 1'bx ) && ( m_prev[56] !== m_expected_prev[56] )
		&& ((m_expected_prev[56] !== last_m_exp[56]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[56] = m_expected_prev[56];
	end
	if (
		( m_expected_prev[57] !== 1'bx ) && ( m_prev[57] !== m_expected_prev[57] )
		&& ((m_expected_prev[57] !== last_m_exp[57]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[57] = m_expected_prev[57];
	end
	if (
		( m_expected_prev[58] !== 1'bx ) && ( m_prev[58] !== m_expected_prev[58] )
		&& ((m_expected_prev[58] !== last_m_exp[58]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[58] = m_expected_prev[58];
	end
	if (
		( m_expected_prev[59] !== 1'bx ) && ( m_prev[59] !== m_expected_prev[59] )
		&& ((m_expected_prev[59] !== last_m_exp[59]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[59] = m_expected_prev[59];
	end
	if (
		( m_expected_prev[60] !== 1'bx ) && ( m_prev[60] !== m_expected_prev[60] )
		&& ((m_expected_prev[60] !== last_m_exp[60]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[60] = m_expected_prev[60];
	end
	if (
		( m_expected_prev[61] !== 1'bx ) && ( m_prev[61] !== m_expected_prev[61] )
		&& ((m_expected_prev[61] !== last_m_exp[61]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[61] = m_expected_prev[61];
	end
	if (
		( m_expected_prev[62] !== 1'bx ) && ( m_prev[62] !== m_expected_prev[62] )
		&& ((m_expected_prev[62] !== last_m_exp[62]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[62] = m_expected_prev[62];
	end
	if (
		( m_expected_prev[63] !== 1'bx ) && ( m_prev[63] !== m_expected_prev[63] )
		&& ((m_expected_prev[63] !== last_m_exp[63]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m_expected_prev);
		$display ("     Real value = %b", m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m_exp[63] = m_expected_prev[63];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Matrix_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] a;
reg [31:0] b;
// wires                                               
wire [63:0] m;

wire sampler;                             

// assign statements (if any)                          
Matrix i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.m(m)
);
// a[ 31 ]
initial
begin
	a[31] = 1'b0;
	a[31] = #400000 1'b1;
end 
// a[ 30 ]
initial
begin
	a[30] = 1'b1;
	a[30] = #400000 1'b0;
	a[30] = #200000 1'b1;
	a[30] = #200000 1'b0;
end 
// a[ 29 ]
initial
begin
	a[29] = 1'b0;
	a[29] = #400000 1'b1;
	a[29] = #200000 1'b0;
	a[29] = #200000 1'b1;
end 
// a[ 28 ]
initial
begin
	a[28] = 1'b1;
	a[28] = #200000 1'b0;
	a[28] = #400000 1'b1;
	a[28] = #200000 1'b0;
end 
// a[ 27 ]
initial
begin
	a[27] = 1'b0;
	a[27] = #400000 1'b1;
end 
// a[ 26 ]
initial
begin
	a[26] = 1'b0;
	a[26] = #800000 1'b1;
end 
// a[ 25 ]
initial
begin
	a[25] = 1'b0;
	a[25] = #600000 1'b1;
	a[25] = #200000 1'b0;
end 
// a[ 24 ]
initial
begin
	a[24] = 1'b0;
	a[24] = #200000 1'b1;
end 
// a[ 23 ]
initial
begin
	a[23] = 1'b0;
	a[23] = #200000 1'b1;
	a[23] = #200000 1'b0;
end 
// a[ 22 ]
initial
begin
	a[22] = 1'b1;
	a[22] = #200000 1'b0;
	a[22] = #400000 1'b1;
end 
// a[ 21 ]
initial
begin
	a[21] = 1'b1;
end 
// a[ 20 ]
initial
begin
	a[20] = 1'b0;
	a[20] = #200000 1'b1;
	a[20] = #200000 1'b0;
	a[20] = #200000 1'b1;
	a[20] = #200000 1'b0;
end 
// a[ 19 ]
initial
begin
	a[19] = 1'b0;
	a[19] = #400000 1'b1;
	a[19] = #400000 1'b0;
end 
// a[ 18 ]
initial
begin
	a[18] = 1'b1;
	a[18] = #200000 1'b0;
	a[18] = #600000 1'b1;
end 
// a[ 17 ]
initial
begin
	a[17] = 1'b0;
	a[17] = #200000 1'b1;
end 
// a[ 16 ]
initial
begin
	a[16] = 1'b0;
	a[16] = #800000 1'b1;
end 
// a[ 15 ]
initial
begin
	a[15] = 1'b0;
end 
// a[ 14 ]
initial
begin
	a[14] = 1'b0;
	a[14] = #400000 1'b1;
	a[14] = #200000 1'b0;
end 
// a[ 13 ]
initial
begin
	a[13] = 1'b0;
	a[13] = #400000 1'b1;
	a[13] = #200000 1'b0;
	a[13] = #200000 1'b1;
end 
// a[ 12 ]
initial
begin
	a[12] = 1'b0;
	a[12] = #200000 1'b1;
	a[12] = #200000 1'b0;
	a[12] = #400000 1'b1;
end 
// a[ 11 ]
initial
begin
	a[11] = 1'b0;
	a[11] = #200000 1'b1;
	a[11] = #200000 1'b0;
	a[11] = #200000 1'b1;
end 
// a[ 10 ]
initial
begin
	a[10] = 1'b0;
	a[10] = #200000 1'b1;
	a[10] = #200000 1'b0;
end 
// a[ 9 ]
initial
begin
	a[9] = 1'b1;
	a[9] = #200000 1'b0;
	a[9] = #400000 1'b1;
	a[9] = #200000 1'b0;
end 
// a[ 8 ]
initial
begin
	a[8] = 1'b0;
	a[8] = #400000 1'b1;
	a[8] = #400000 1'b0;
end 
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
	a[7] = #400000 1'b1;
	a[7] = #200000 1'b0;
	a[7] = #200000 1'b1;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b1;
	a[6] = #400000 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b1;
	a[5] = #200000 1'b0;
	a[5] = #200000 1'b1;
	a[5] = #400000 1'b0;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b0;
	a[4] = #200000 1'b1;
	a[4] = #200000 1'b0;
	a[4] = #200000 1'b1;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b1;
	a[3] = #800000 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b0;
	a[2] = #200000 1'b1;
	a[2] = #200000 1'b0;
	a[2] = #200000 1'b1;
	a[2] = #200000 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
	a[1] = #400000 1'b1;
	a[1] = #200000 1'b0;
	a[1] = #200000 1'b1;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
	a[0] = #200000 1'b1;
end 
// b[ 31 ]
initial
begin
	b[31] = 1'b1;
	b[31] = #200000 1'b0;
	b[31] = #600000 1'b1;
end 
// b[ 30 ]
initial
begin
	b[30] = 1'b1;
	b[30] = #200000 1'b0;
	b[30] = #200000 1'b1;
	b[30] = #200000 1'b0;
	b[30] = #200000 1'b1;
end 
// b[ 29 ]
initial
begin
	b[29] = 1'b0;
	b[29] = #200000 1'b1;
	b[29] = #200000 1'b0;
	b[29] = #200000 1'b1;
	b[29] = #200000 1'b0;
end 
// b[ 28 ]
initial
begin
	b[28] = 1'b0;
end 
// b[ 27 ]
initial
begin
	b[27] = 1'b1;
	b[27] = #200000 1'b0;
	b[27] = #400000 1'b1;
end 
// b[ 26 ]
initial
begin
	b[26] = 1'b1;
end 
// b[ 25 ]
initial
begin
	b[25] = 1'b0;
	b[25] = #600000 1'b1;
end 
// b[ 24 ]
initial
begin
	b[24] = 1'b1;
	b[24] = #200000 1'b0;
	b[24] = #200000 1'b1;
end 
// b[ 23 ]
initial
begin
	b[23] = 1'b1;
	b[23] = #200000 1'b0;
	b[23] = #400000 1'b1;
	b[23] = #200000 1'b0;
end 
// b[ 22 ]
initial
begin
	b[22] = 1'b0;
	b[22] = #200000 1'b1;
	b[22] = #200000 1'b0;
	b[22] = #200000 1'b1;
end 
// b[ 21 ]
initial
begin
	b[21] = 1'b0;
	b[21] = #200000 1'b1;
	b[21] = #400000 1'b0;
	b[21] = #200000 1'b1;
end 
// b[ 20 ]
initial
begin
	b[20] = 1'b1;
	b[20] = #800000 1'b0;
end 
// b[ 19 ]
initial
begin
	b[19] = 1'b0;
	b[19] = #200000 1'b1;
	b[19] = #400000 1'b0;
	b[19] = #200000 1'b1;
end 
// b[ 18 ]
initial
begin
	b[18] = 1'b0;
	b[18] = #600000 1'b1;
end 
// b[ 17 ]
initial
begin
	b[17] = 1'b1;
	b[17] = #200000 1'b0;
	b[17] = #200000 1'b1;
	b[17] = #200000 1'b0;
	b[17] = #200000 1'b1;
end 
// b[ 16 ]
initial
begin
	b[16] = 1'b1;
	b[16] = #600000 1'b0;
	b[16] = #200000 1'b1;
end 
// b[ 15 ]
initial
begin
	b[15] = 1'b1;
	b[15] = #600000 1'b0;
end 
// b[ 14 ]
initial
begin
	b[14] = 1'b1;
	b[14] = #200000 1'b0;
	b[14] = #400000 1'b1;
	b[14] = #200000 1'b0;
end 
// b[ 13 ]
initial
begin
	b[13] = 1'b0;
	b[13] = #200000 1'b1;
	b[13] = #200000 1'b0;
	b[13] = #400000 1'b1;
end 
// b[ 12 ]
initial
begin
	b[12] = 1'b0;
end 
// b[ 11 ]
initial
begin
	b[11] = 1'b1;
	b[11] = #200000 1'b0;
	b[11] = #200000 1'b1;
	b[11] = #200000 1'b0;
end 
// b[ 10 ]
initial
begin
	b[10] = 1'b0;
	b[10] = #400000 1'b1;
end 
// b[ 9 ]
initial
begin
	b[9] = 1'b1;
	b[9] = #400000 1'b0;
	b[9] = #200000 1'b1;
	b[9] = #200000 1'b0;
end 
// b[ 8 ]
initial
begin
	b[8] = 1'b0;
	b[8] = #200000 1'b1;
	b[8] = #200000 1'b0;
	b[8] = #200000 1'b1;
end 
// b[ 7 ]
initial
begin
	b[7] = 1'b0;
	b[7] = #400000 1'b1;
	b[7] = #200000 1'b0;
	b[7] = #200000 1'b1;
end 
// b[ 6 ]
initial
begin
	b[6] = 1'b1;
	b[6] = #800000 1'b0;
end 
// b[ 5 ]
initial
begin
	b[5] = 1'b1;
	b[5] = #400000 1'b0;
	b[5] = #200000 1'b1;
	b[5] = #200000 1'b0;
end 
// b[ 4 ]
initial
begin
	b[4] = 1'b0;
	b[4] = #800000 1'b1;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b1;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b1;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b1;
	b[1] = #200000 1'b0;
	b[1] = #400000 1'b1;
	b[1] = #200000 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b1;
	b[0] = #200000 1'b0;
	b[0] = #400000 1'b1;
	b[0] = #200000 1'b0;
end 

Matrix_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.sampler_tx(sampler)
);

Matrix_vlg_check_tst tb_out(
	.m(m),
	.sampler_rx(sampler)
);
endmodule

